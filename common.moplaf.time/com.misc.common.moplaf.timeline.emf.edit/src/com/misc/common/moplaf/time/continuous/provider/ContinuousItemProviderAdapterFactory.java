/**
 */
package com.misc.common.moplaf.time.continuous.provider;

import com.misc.common.moplaf.time.continuous.util.ContinuousAdapterFactory;
import com.misc.common.moplaf.timeview.impl.IItemAmountEventsProvider;
import com.misc.common.moplaf.timeview.impl.IItemDiscontinuousAmountEventProvider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.Disposable;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class ContinuousItemProviderAdapterFactory extends ContinuousAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Disposable disposable = new Disposable();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 */
	public ContinuousItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
		supportedTypes.add(IItemDiscontinuousAmountEventProvider.class); // non emf interface
		supportedTypes.add(IItemAmountEventsProvider.class); // non emf interface
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.Distribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDistributionAdapter() {
		return new DistributionItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.CapacityChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapacityChangeAdapter() {
		return new CapacityChangeItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.SlopeImpulsionProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlopeImpulsionProviderAdapter() {
		return new SlopeImpulsionProviderItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.SlopeAbsoluteProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlopeAbsoluteProviderAdapter() {
		return new SlopeAbsoluteProviderItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.AmountImpulsionProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmountImpulsionProviderAdapter() {
		return new AmountImpulsionProviderItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.AmountAbsoluteProvider}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmountAbsoluteProviderAdapter() {
		return new AmountAbsoluteProviderItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.StockChange}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStockChangeAdapter() {
		return new StockChangeItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.StockChangeStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStockChangeStartAdapter() {
		return new StockChangeStartItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.StockChangeEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStockChangeEndAdapter() {
		return new StockChangeEndItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.AmountImpulsionAtomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmountImpulsionAtomicAdapter() {
		return new AmountImpulsionAtomicItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.SlopeImpulsionAtomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlopeImpulsionAtomicAdapter() {
		return new SlopeImpulsionAtomicItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.AmountAbsoluteAtomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAmountAbsoluteAtomicAdapter() {
		return new AmountAbsoluteAtomicItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.SlopeAbsoluteAtomic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSlopeAbsoluteAtomicAdapter() {
		return new SlopeAbsoluteAtomicItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.ChildEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChildEventAdapter() {
		return new ChildEventItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.StartEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStartEventAdapter() {
		return new StartEventItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.EndEvent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEndEventAdapter() {
		return new EndEventItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.CapacityChangeStart}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapacityChangeStartAdapter() {
		return new CapacityChangeStartItemProvider(this);
	}

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.CapacityChangeEnd}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCapacityChangeEndAdapter() {
		return new CapacityChangeEndItemProvider(this);
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	protected void associate(Adapter adapter, Notifier target) {
		super.associate(adapter, target);
		if (adapter != null) {
			disposable.add(adapter);
		}
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		disposable.dispose();
	}

}
