/*******************************************************************************
 * Copyright (c) 2017 Michel Schaffers and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Michel Schaffers - initial API and implementation
 *******************************************************************************/
/**
 */
package com.misc.common.moplaf.time.continuous.calc.provider;

import com.misc.common.moplaf.time.continuous.calc.util.TimeContinuousCalcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TimeContinuousCalcItemProviderAdapterFactory extends TimeContinuousCalcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TimeContinuousCalcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.ScopeDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScopeDistributionItemProvider scopeDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.ScopeDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScopeDistributionAdapter() {
		if (scopeDistributionItemProvider == null) {
			scopeDistributionItemProvider = new ScopeDistributionItemProvider(this);
		}

		return scopeDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionInitialization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcDistributionInitializationItemProvider calcDistributionInitializationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionInitialization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcDistributionInitializationAdapter() {
		if (calcDistributionInitializationItemProvider == null) {
			calcDistributionInitializationItemProvider = new CalcDistributionInitializationItemProvider(this);
		}

		return calcDistributionInitializationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.LayerCompositeEventRefresh} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerCompositeEventRefreshItemProvider layerCompositeEventRefreshItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.LayerCompositeEventRefresh}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerCompositeEventRefreshAdapter() {
		if (layerCompositeEventRefreshItemProvider == null) {
			layerCompositeEventRefreshItemProvider = new LayerCompositeEventRefreshItemProvider(this);
		}

		return layerCompositeEventRefreshItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionChildEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcDistributionChildEventsItemProvider calcDistributionChildEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionChildEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcDistributionChildEventsAdapter() {
		if (calcDistributionChildEventsItemProvider == null) {
			calcDistributionChildEventsItemProvider = new CalcDistributionChildEventsItemProvider(this);
		}

		return calcDistributionChildEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionProvidedEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcDistributionProvidedEventsItemProvider calcDistributionProvidedEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionProvidedEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcDistributionProvidedEventsAdapter() {
		if (calcDistributionProvidedEventsItemProvider == null) {
			calcDistributionProvidedEventsItemProvider = new CalcDistributionProvidedEventsItemProvider(this);
		}

		return calcDistributionProvidedEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcDistributionSequenceItemProvider calcDistributionSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcDistributionSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcDistributionSequenceAdapter() {
		if (calcDistributionSequenceItemProvider == null) {
			calcDistributionSequenceItemProvider = new CalcDistributionSequenceItemProvider(this);
		}

		return calcDistributionSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.LayerDistributionSlopes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerDistributionSlopesItemProvider layerDistributionSlopesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.LayerDistributionSlopes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerDistributionSlopesAdapter() {
		if (layerDistributionSlopesItemProvider == null) {
			layerDistributionSlopesItemProvider = new LayerDistributionSlopesItemProvider(this);
		}

		return layerDistributionSlopesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.LayerDistributionAmounts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LayerDistributionAmountsItemProvider layerDistributionAmountsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.LayerDistributionAmounts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLayerDistributionAmountsAdapter() {
		if (layerDistributionAmountsItemProvider == null) {
			layerDistributionAmountsItemProvider = new LayerDistributionAmountsItemProvider(this);
		}

		return layerDistributionAmountsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAmountAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountAbsoluteAmountAbsoluteItemProvider calcAmountAbsoluteAmountAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAmountAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountAbsoluteAmountAbsoluteAdapter() {
		if (calcAmountAbsoluteAmountAbsoluteItemProvider == null) {
			calcAmountAbsoluteAmountAbsoluteItemProvider = new CalcAmountAbsoluteAmountAbsoluteItemProvider(this);
		}

		return calcAmountAbsoluteAmountAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountAbsoluteAmountAfterItemProvider calcAmountAbsoluteAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountAbsoluteAmountAfterAdapter() {
		if (calcAmountAbsoluteAmountAfterItemProvider == null) {
			calcAmountAbsoluteAmountAfterItemProvider = new CalcAmountAbsoluteAmountAfterItemProvider(this);
		}

		return calcAmountAbsoluteAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAtomicAmountAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountAbsoluteAtomicAmountAbsoluteItemProvider calcAmountAbsoluteAtomicAmountAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAtomicAmountAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountAbsoluteAtomicAmountAbsoluteAdapter() {
		if (calcAmountAbsoluteAtomicAmountAbsoluteItemProvider == null) {
			calcAmountAbsoluteAtomicAmountAbsoluteItemProvider = new CalcAmountAbsoluteAtomicAmountAbsoluteItemProvider(this);
		}

		return calcAmountAbsoluteAtomicAmountAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountAbsoluteAtomicMomentItemProvider calcAmountAbsoluteAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountAbsoluteAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountAbsoluteAtomicMomentAdapter() {
		if (calcAmountAbsoluteAtomicMomentItemProvider == null) {
			calcAmountAbsoluteAtomicMomentItemProvider = new CalcAmountAbsoluteAtomicMomentItemProvider(this);
		}

		return calcAmountAbsoluteAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountDeltaAmountAfterItemProvider calcAmountDeltaAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountDeltaAmountAfterAdapter() {
		if (calcAmountDeltaAmountAfterItemProvider == null) {
			calcAmountDeltaAmountAfterItemProvider = new CalcAmountDeltaAmountAfterItemProvider(this);
		}

		return calcAmountDeltaAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAmountDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountDeltaAmountDeltaItemProvider calcAmountDeltaAmountDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAmountDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountDeltaAmountDeltaAdapter() {
		if (calcAmountDeltaAmountDeltaItemProvider == null) {
			calcAmountDeltaAmountDeltaItemProvider = new CalcAmountDeltaAmountDeltaItemProvider(this);
		}

		return calcAmountDeltaAmountDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAtomicAmountDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountDeltaAtomicAmountDeltaItemProvider calcAmountDeltaAtomicAmountDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAtomicAmountDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountDeltaAtomicAmountDeltaAdapter() {
		if (calcAmountDeltaAtomicAmountDeltaItemProvider == null) {
			calcAmountDeltaAtomicAmountDeltaItemProvider = new CalcAmountDeltaAtomicAmountDeltaItemProvider(this);
		}

		return calcAmountDeltaAtomicAmountDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcAmountDeltaAtomicMomentItemProvider calcAmountDeltaAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcAmountDeltaAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcAmountDeltaAtomicMomentAdapter() {
		if (calcAmountDeltaAtomicMomentItemProvider == null) {
			calcAmountDeltaAtomicMomentItemProvider = new CalcAmountDeltaAtomicMomentItemProvider(this);
		}

		return calcAmountDeltaAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeEndAmountDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcCapacityChangeEndAmountDeltaItemProvider calcCapacityChangeEndAmountDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeEndAmountDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcCapacityChangeEndAmountDeltaAdapter() {
		if (calcCapacityChangeEndAmountDeltaItemProvider == null) {
			calcCapacityChangeEndAmountDeltaItemProvider = new CalcCapacityChangeEndAmountDeltaItemProvider(this);
		}

		return calcCapacityChangeEndAmountDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeEndMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcCapacityChangeEndMomentItemProvider calcCapacityChangeEndMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeEndMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcCapacityChangeEndMomentAdapter() {
		if (calcCapacityChangeEndMomentItemProvider == null) {
			calcCapacityChangeEndMomentItemProvider = new CalcCapacityChangeEndMomentItemProvider(this);
		}

		return calcCapacityChangeEndMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeStartAmountDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcCapacityChangeStartAmountDeltaItemProvider calcCapacityChangeStartAmountDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeStartAmountDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcCapacityChangeStartAmountDeltaAdapter() {
		if (calcCapacityChangeStartAmountDeltaItemProvider == null) {
			calcCapacityChangeStartAmountDeltaItemProvider = new CalcCapacityChangeStartAmountDeltaItemProvider(this);
		}

		return calcCapacityChangeStartAmountDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeStartMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcCapacityChangeStartMomentItemProvider calcCapacityChangeStartMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcCapacityChangeStartMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcCapacityChangeStartMomentAdapter() {
		if (calcCapacityChangeStartMomentItemProvider == null) {
			calcCapacityChangeStartMomentItemProvider = new CalcCapacityChangeStartMomentItemProvider(this);
		}

		return calcCapacityChangeStartMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcChildEventAmountAfterItemProvider calcChildEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcChildEventAmountAfterAdapter() {
		if (calcChildEventAmountAfterItemProvider == null) {
			calcChildEventAmountAfterItemProvider = new CalcChildEventAmountAfterItemProvider(this);
		}

		return calcChildEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcChildEventMomentItemProvider calcChildEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcChildEventMomentAdapter() {
		if (calcChildEventMomentItemProvider == null) {
			calcChildEventMomentItemProvider = new CalcChildEventMomentItemProvider(this);
		}

		return calcChildEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcChildEventSlopeAfterItemProvider calcChildEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcChildEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcChildEventSlopeAfterAdapter() {
		if (calcChildEventSlopeAfterItemProvider == null) {
			calcChildEventSlopeAfterItemProvider = new CalcChildEventSlopeAfterItemProvider(this);
		}

		return calcChildEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEndEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEndEventMomentItemProvider calcEndEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEndEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEndEventMomentAdapter() {
		if (calcEndEventMomentItemProvider == null) {
			calcEndEventMomentItemProvider = new CalcEndEventMomentItemProvider(this);
		}

		return calcEndEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventAmountAfterItemProvider calcEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventAmountAfterAdapter() {
		if (calcEventAmountAfterItemProvider == null) {
			calcEventAmountAfterItemProvider = new CalcEventAmountAfterItemProvider(this);
		}

		return calcEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmountBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventAmountBeforeItemProvider calcEventAmountBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmountBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventAmountBeforeAdapter() {
		if (calcEventAmountBeforeItemProvider == null) {
			calcEventAmountBeforeItemProvider = new CalcEventAmountBeforeItemProvider(this);
		}

		return calcEventAmountBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventMomentItemProvider calcEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventMomentAdapter() {
		if (calcEventMomentItemProvider == null) {
			calcEventMomentItemProvider = new CalcEventMomentItemProvider(this);
		}

		return calcEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventSlopeAfterItemProvider calcEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventSlopeAfterAdapter() {
		if (calcEventSlopeAfterItemProvider == null) {
			calcEventSlopeAfterItemProvider = new CalcEventSlopeAfterItemProvider(this);
		}

		return calcEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlopeBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventSlopeBeforeItemProvider calcEventSlopeBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlopeBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventSlopeBeforeAdapter() {
		if (calcEventSlopeBeforeItemProvider == null) {
			calcEventSlopeBeforeItemProvider = new CalcEventSlopeBeforeItemProvider(this);
		}

		return calcEventSlopeBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventsProviderRefreshEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventsProviderRefreshEventsItemProvider calcEventsProviderRefreshEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventsProviderRefreshEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventsProviderRefreshEventsAdapter() {
		if (calcEventsProviderRefreshEventsItemProvider == null) {
			calcEventsProviderRefreshEventsItemProvider = new CalcEventsProviderRefreshEventsItemProvider(this);
		}

		return calcEventsProviderRefreshEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeAbsoluteAtomicMomentItemProvider calcSlopeAbsoluteAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeAbsoluteAtomicMomentAdapter() {
		if (calcSlopeAbsoluteAtomicMomentItemProvider == null) {
			calcSlopeAbsoluteAtomicMomentItemProvider = new CalcSlopeAbsoluteAtomicMomentItemProvider(this);
		}

		return calcSlopeAbsoluteAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteAtomicSlopeAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteAtomicSlopeAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeAbsoluteAtomicSlopeAbsoluteAdapter() {
		if (calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider == null) {
			calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider = new CalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider(this);
		}

		return calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteSlopeAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeAbsoluteSlopeAbsoluteItemProvider calcSlopeAbsoluteSlopeAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteSlopeAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeAbsoluteSlopeAbsoluteAdapter() {
		if (calcSlopeAbsoluteSlopeAbsoluteItemProvider == null) {
			calcSlopeAbsoluteSlopeAbsoluteItemProvider = new CalcSlopeAbsoluteSlopeAbsoluteItemProvider(this);
		}

		return calcSlopeAbsoluteSlopeAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeAbsoluteSlopeAfterItemProvider calcSlopeAbsoluteSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeAbsoluteSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeAbsoluteSlopeAfterAdapter() {
		if (calcSlopeAbsoluteSlopeAfterItemProvider == null) {
			calcSlopeAbsoluteSlopeAfterItemProvider = new CalcSlopeAbsoluteSlopeAfterItemProvider(this);
		}

		return calcSlopeAbsoluteSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeDeltaAtomicMomentItemProvider calcSlopeDeltaAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeDeltaAtomicMomentAdapter() {
		if (calcSlopeDeltaAtomicMomentItemProvider == null) {
			calcSlopeDeltaAtomicMomentItemProvider = new CalcSlopeDeltaAtomicMomentItemProvider(this);
		}

		return calcSlopeDeltaAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaAtomicSlopeDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeDeltaAtomicSlopeDeltaItemProvider calcSlopeDeltaAtomicSlopeDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaAtomicSlopeDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeDeltaAtomicSlopeDeltaAdapter() {
		if (calcSlopeDeltaAtomicSlopeDeltaItemProvider == null) {
			calcSlopeDeltaAtomicSlopeDeltaItemProvider = new CalcSlopeDeltaAtomicSlopeDeltaItemProvider(this);
		}

		return calcSlopeDeltaAtomicSlopeDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeDeltaSlopeAfterItemProvider calcSlopeDeltaSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeDeltaSlopeAfterAdapter() {
		if (calcSlopeDeltaSlopeAfterItemProvider == null) {
			calcSlopeDeltaSlopeAfterItemProvider = new CalcSlopeDeltaSlopeAfterItemProvider(this);
		}

		return calcSlopeDeltaSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaSlopeDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcSlopeDeltaSlopeDeltaItemProvider calcSlopeDeltaSlopeDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcSlopeDeltaSlopeDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcSlopeDeltaSlopeDeltaAdapter() {
		if (calcSlopeDeltaSlopeDeltaItemProvider == null) {
			calcSlopeDeltaSlopeDeltaItemProvider = new CalcSlopeDeltaSlopeDeltaItemProvider(this);
		}

		return calcSlopeDeltaSlopeDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStartEventAmountAfterItemProvider calcStartEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStartEventAmountAfterAdapter() {
		if (calcStartEventAmountAfterItemProvider == null) {
			calcStartEventAmountAfterItemProvider = new CalcStartEventAmountAfterItemProvider(this);
		}

		return calcStartEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStartEventMomentItemProvider calcStartEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStartEventMomentAdapter() {
		if (calcStartEventMomentItemProvider == null) {
			calcStartEventMomentItemProvider = new CalcStartEventMomentItemProvider(this);
		}

		return calcStartEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStartEventSlopeAfterItemProvider calcStartEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStartEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStartEventSlopeAfterAdapter() {
		if (calcStartEventSlopeAfterItemProvider == null) {
			calcStartEventSlopeAfterItemProvider = new CalcStartEventSlopeAfterItemProvider(this);
		}

		return calcStartEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeEndMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStockChangeEndMomentItemProvider calcStockChangeEndMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeEndMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStockChangeEndMomentAdapter() {
		if (calcStockChangeEndMomentItemProvider == null) {
			calcStockChangeEndMomentItemProvider = new CalcStockChangeEndMomentItemProvider(this);
		}

		return calcStockChangeEndMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeEndSlopeDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStockChangeEndSlopeDeltaItemProvider calcStockChangeEndSlopeDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeEndSlopeDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStockChangeEndSlopeDeltaAdapter() {
		if (calcStockChangeEndSlopeDeltaItemProvider == null) {
			calcStockChangeEndSlopeDeltaItemProvider = new CalcStockChangeEndSlopeDeltaItemProvider(this);
		}

		return calcStockChangeEndSlopeDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeStartMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStockChangeStartMomentItemProvider calcStockChangeStartMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeStartMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStockChangeStartMomentAdapter() {
		if (calcStockChangeStartMomentItemProvider == null) {
			calcStockChangeStartMomentItemProvider = new CalcStockChangeStartMomentItemProvider(this);
		}

		return calcStockChangeStartMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeStartSlopeDelta} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcStockChangeStartSlopeDeltaItemProvider calcStockChangeStartSlopeDeltaItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcStockChangeStartSlopeDelta}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcStockChangeStartSlopeDeltaAdapter() {
		if (calcStockChangeStartSlopeDeltaItemProvider == null) {
			calcStockChangeStartSlopeDeltaItemProvider = new CalcStockChangeStartSlopeDeltaItemProvider(this);
		}

		return calcStockChangeStartSlopeDeltaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventSlopeItemProvider calcEventSlopeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventSlope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventSlopeAdapter() {
		if (calcEventSlopeItemProvider == null) {
			calcEventSlopeItemProvider = new CalcEventSlopeItemProvider(this);
		}

		return calcEventSlopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalcEventAmountItemProvider calcEventAmountItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.CalcEventAmount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalcEventAmountAdapter() {
		if (calcEventAmountItemProvider == null) {
			calcEventAmountItemProvider = new CalcEventAmountItemProvider(this);
		}

		return calcEventAmountItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (scopeDistributionItemProvider != null) scopeDistributionItemProvider.dispose();
		if (calcDistributionInitializationItemProvider != null) calcDistributionInitializationItemProvider.dispose();
		if (layerCompositeEventRefreshItemProvider != null) layerCompositeEventRefreshItemProvider.dispose();
		if (calcDistributionChildEventsItemProvider != null) calcDistributionChildEventsItemProvider.dispose();
		if (calcDistributionProvidedEventsItemProvider != null) calcDistributionProvidedEventsItemProvider.dispose();
		if (calcDistributionSequenceItemProvider != null) calcDistributionSequenceItemProvider.dispose();
		if (layerDistributionSlopesItemProvider != null) layerDistributionSlopesItemProvider.dispose();
		if (layerDistributionAmountsItemProvider != null) layerDistributionAmountsItemProvider.dispose();
		if (calcAmountAbsoluteAmountAbsoluteItemProvider != null) calcAmountAbsoluteAmountAbsoluteItemProvider.dispose();
		if (calcAmountAbsoluteAmountAfterItemProvider != null) calcAmountAbsoluteAmountAfterItemProvider.dispose();
		if (calcAmountAbsoluteAtomicAmountAbsoluteItemProvider != null) calcAmountAbsoluteAtomicAmountAbsoluteItemProvider.dispose();
		if (calcAmountAbsoluteAtomicMomentItemProvider != null) calcAmountAbsoluteAtomicMomentItemProvider.dispose();
		if (calcAmountDeltaAmountAfterItemProvider != null) calcAmountDeltaAmountAfterItemProvider.dispose();
		if (calcAmountDeltaAmountDeltaItemProvider != null) calcAmountDeltaAmountDeltaItemProvider.dispose();
		if (calcAmountDeltaAtomicAmountDeltaItemProvider != null) calcAmountDeltaAtomicAmountDeltaItemProvider.dispose();
		if (calcAmountDeltaAtomicMomentItemProvider != null) calcAmountDeltaAtomicMomentItemProvider.dispose();
		if (calcCapacityChangeEndAmountDeltaItemProvider != null) calcCapacityChangeEndAmountDeltaItemProvider.dispose();
		if (calcCapacityChangeEndMomentItemProvider != null) calcCapacityChangeEndMomentItemProvider.dispose();
		if (calcCapacityChangeStartAmountDeltaItemProvider != null) calcCapacityChangeStartAmountDeltaItemProvider.dispose();
		if (calcCapacityChangeStartMomentItemProvider != null) calcCapacityChangeStartMomentItemProvider.dispose();
		if (calcChildEventAmountAfterItemProvider != null) calcChildEventAmountAfterItemProvider.dispose();
		if (calcChildEventMomentItemProvider != null) calcChildEventMomentItemProvider.dispose();
		if (calcChildEventSlopeAfterItemProvider != null) calcChildEventSlopeAfterItemProvider.dispose();
		if (calcEndEventMomentItemProvider != null) calcEndEventMomentItemProvider.dispose();
		if (calcEventAmountAfterItemProvider != null) calcEventAmountAfterItemProvider.dispose();
		if (calcEventAmountBeforeItemProvider != null) calcEventAmountBeforeItemProvider.dispose();
		if (calcEventMomentItemProvider != null) calcEventMomentItemProvider.dispose();
		if (calcEventSlopeAfterItemProvider != null) calcEventSlopeAfterItemProvider.dispose();
		if (calcEventSlopeBeforeItemProvider != null) calcEventSlopeBeforeItemProvider.dispose();
		if (calcEventsProviderRefreshEventsItemProvider != null) calcEventsProviderRefreshEventsItemProvider.dispose();
		if (calcSlopeAbsoluteAtomicMomentItemProvider != null) calcSlopeAbsoluteAtomicMomentItemProvider.dispose();
		if (calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider != null) calcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider.dispose();
		if (calcSlopeAbsoluteSlopeAbsoluteItemProvider != null) calcSlopeAbsoluteSlopeAbsoluteItemProvider.dispose();
		if (calcSlopeAbsoluteSlopeAfterItemProvider != null) calcSlopeAbsoluteSlopeAfterItemProvider.dispose();
		if (calcSlopeDeltaAtomicMomentItemProvider != null) calcSlopeDeltaAtomicMomentItemProvider.dispose();
		if (calcSlopeDeltaAtomicSlopeDeltaItemProvider != null) calcSlopeDeltaAtomicSlopeDeltaItemProvider.dispose();
		if (calcSlopeDeltaSlopeAfterItemProvider != null) calcSlopeDeltaSlopeAfterItemProvider.dispose();
		if (calcSlopeDeltaSlopeDeltaItemProvider != null) calcSlopeDeltaSlopeDeltaItemProvider.dispose();
		if (calcStartEventAmountAfterItemProvider != null) calcStartEventAmountAfterItemProvider.dispose();
		if (calcStartEventMomentItemProvider != null) calcStartEventMomentItemProvider.dispose();
		if (calcStartEventSlopeAfterItemProvider != null) calcStartEventSlopeAfterItemProvider.dispose();
		if (calcStockChangeEndMomentItemProvider != null) calcStockChangeEndMomentItemProvider.dispose();
		if (calcStockChangeEndSlopeDeltaItemProvider != null) calcStockChangeEndSlopeDeltaItemProvider.dispose();
		if (calcStockChangeStartMomentItemProvider != null) calcStockChangeStartMomentItemProvider.dispose();
		if (calcStockChangeStartSlopeDeltaItemProvider != null) calcStockChangeStartSlopeDeltaItemProvider.dispose();
		if (calcEventSlopeItemProvider != null) calcEventSlopeItemProvider.dispose();
		if (calcEventAmountItemProvider != null) calcEventAmountItemProvider.dispose();
	}

}
