/**
 */
package com.misc.common.moplaf.time.continuous.calc.provider;

import com.misc.common.moplaf.time.continuous.calc.util.TimeContinuousCalcAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class TimeContinuousCalcItemProviderAdapterFactory extends TimeContinuousCalcAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public TimeContinuousCalcItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorScopeDistribution} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorScopeDistributionItemProvider propagatorScopeDistributionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorScopeDistribution}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorScopeDistributionAdapter() {
		if (propagatorScopeDistributionItemProvider == null) {
			propagatorScopeDistributionItemProvider = new PropagatorScopeDistributionItemProvider(this);
		}

		return propagatorScopeDistributionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionInitialization} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcDistributionInitializationItemProvider propagatorCalcDistributionInitializationItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionInitialization}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcDistributionInitializationAdapter() {
		if (propagatorCalcDistributionInitializationItemProvider == null) {
			propagatorCalcDistributionInitializationItemProvider = new PropagatorCalcDistributionInitializationItemProvider(this);
		}

		return propagatorCalcDistributionInitializationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerCompositeEventRefresh} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorLayerCompositeEventRefreshItemProvider propagatorLayerCompositeEventRefreshItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerCompositeEventRefresh}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorLayerCompositeEventRefreshAdapter() {
		if (propagatorLayerCompositeEventRefreshItemProvider == null) {
			propagatorLayerCompositeEventRefreshItemProvider = new PropagatorLayerCompositeEventRefreshItemProvider(this);
		}

		return propagatorLayerCompositeEventRefreshItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionChildEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcDistributionChildEventsItemProvider propagatorCalcDistributionChildEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionChildEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcDistributionChildEventsAdapter() {
		if (propagatorCalcDistributionChildEventsItemProvider == null) {
			propagatorCalcDistributionChildEventsItemProvider = new PropagatorCalcDistributionChildEventsItemProvider(this);
		}

		return propagatorCalcDistributionChildEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionProvidedEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcDistributionProvidedEventsItemProvider propagatorCalcDistributionProvidedEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionProvidedEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcDistributionProvidedEventsAdapter() {
		if (propagatorCalcDistributionProvidedEventsItemProvider == null) {
			propagatorCalcDistributionProvidedEventsItemProvider = new PropagatorCalcDistributionProvidedEventsItemProvider(this);
		}

		return propagatorCalcDistributionProvidedEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionSequence} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcDistributionSequenceItemProvider propagatorCalcDistributionSequenceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcDistributionSequence}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcDistributionSequenceAdapter() {
		if (propagatorCalcDistributionSequenceItemProvider == null) {
			propagatorCalcDistributionSequenceItemProvider = new PropagatorCalcDistributionSequenceItemProvider(this);
		}

		return propagatorCalcDistributionSequenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerDistributionSlopes} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorLayerDistributionSlopesItemProvider propagatorLayerDistributionSlopesItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerDistributionSlopes}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorLayerDistributionSlopesAdapter() {
		if (propagatorLayerDistributionSlopesItemProvider == null) {
			propagatorLayerDistributionSlopesItemProvider = new PropagatorLayerDistributionSlopesItemProvider(this);
		}

		return propagatorLayerDistributionSlopesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerDistributionAmounts} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorLayerDistributionAmountsItemProvider propagatorLayerDistributionAmountsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorLayerDistributionAmounts}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorLayerDistributionAmountsAdapter() {
		if (propagatorLayerDistributionAmountsItemProvider == null) {
			propagatorLayerDistributionAmountsItemProvider = new PropagatorLayerDistributionAmountsItemProvider(this);
		}

		return propagatorLayerDistributionAmountsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAmountAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountAbsoluteAmountAbsoluteItemProvider propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAmountAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountAbsoluteAmountAbsoluteAdapter() {
		if (propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider == null) {
			propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider = new PropagatorCalcAmountAbsoluteAmountAbsoluteItemProvider(this);
		}

		return propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountAbsoluteAmountAfterItemProvider propagatorCalcAmountAbsoluteAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountAbsoluteAmountAfterAdapter() {
		if (propagatorCalcAmountAbsoluteAmountAfterItemProvider == null) {
			propagatorCalcAmountAbsoluteAmountAfterItemProvider = new PropagatorCalcAmountAbsoluteAmountAfterItemProvider(this);
		}

		return propagatorCalcAmountAbsoluteAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAtomicAmountAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAtomicAmountAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountAbsoluteAtomicAmountAbsoluteAdapter() {
		if (propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider == null) {
			propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider = new PropagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider(this);
		}

		return propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountAbsoluteAtomicMomentItemProvider propagatorCalcAmountAbsoluteAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountAbsoluteAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountAbsoluteAtomicMomentAdapter() {
		if (propagatorCalcAmountAbsoluteAtomicMomentItemProvider == null) {
			propagatorCalcAmountAbsoluteAtomicMomentItemProvider = new PropagatorCalcAmountAbsoluteAtomicMomentItemProvider(this);
		}

		return propagatorCalcAmountAbsoluteAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountImpulsionAmountAfterItemProvider propagatorCalcAmountImpulsionAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountImpulsionAmountAfterAdapter() {
		if (propagatorCalcAmountImpulsionAmountAfterItemProvider == null) {
			propagatorCalcAmountImpulsionAmountAfterItemProvider = new PropagatorCalcAmountImpulsionAmountAfterItemProvider(this);
		}

		return propagatorCalcAmountImpulsionAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAmountImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountImpulsionAmountImpulsionItemProvider propagatorCalcAmountImpulsionAmountImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAmountImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountImpulsionAmountImpulsionAdapter() {
		if (propagatorCalcAmountImpulsionAmountImpulsionItemProvider == null) {
			propagatorCalcAmountImpulsionAmountImpulsionItemProvider = new PropagatorCalcAmountImpulsionAmountImpulsionItemProvider(this);
		}

		return propagatorCalcAmountImpulsionAmountImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAtomicAmountImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAtomicAmountImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountImpulsionAtomicAmountImpulsionAdapter() {
		if (propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider == null) {
			propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider = new PropagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider(this);
		}

		return propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountImpulsionAtomicMomentItemProvider propagatorCalcAmountImpulsionAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmountImpulsionAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountImpulsionAtomicMomentAdapter() {
		if (propagatorCalcAmountImpulsionAtomicMomentItemProvider == null) {
			propagatorCalcAmountImpulsionAtomicMomentItemProvider = new PropagatorCalcAmountImpulsionAtomicMomentItemProvider(this);
		}

		return propagatorCalcAmountImpulsionAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeEndAmountImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcCapacityChangeEndAmountImpulsionItemProvider propagatorCalcCapacityChangeEndAmountImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeEndAmountImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcCapacityChangeEndAmountImpulsionAdapter() {
		if (propagatorCalcCapacityChangeEndAmountImpulsionItemProvider == null) {
			propagatorCalcCapacityChangeEndAmountImpulsionItemProvider = new PropagatorCalcCapacityChangeEndAmountImpulsionItemProvider(this);
		}

		return propagatorCalcCapacityChangeEndAmountImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeEndMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcCapacityChangeEndMomentItemProvider propagatorCalcCapacityChangeEndMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeEndMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcCapacityChangeEndMomentAdapter() {
		if (propagatorCalcCapacityChangeEndMomentItemProvider == null) {
			propagatorCalcCapacityChangeEndMomentItemProvider = new PropagatorCalcCapacityChangeEndMomentItemProvider(this);
		}

		return propagatorCalcCapacityChangeEndMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeStartAmountImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcCapacityChangeStartAmountImpulsionItemProvider propagatorCalcCapacityChangeStartAmountImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeStartAmountImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcCapacityChangeStartAmountImpulsionAdapter() {
		if (propagatorCalcCapacityChangeStartAmountImpulsionItemProvider == null) {
			propagatorCalcCapacityChangeStartAmountImpulsionItemProvider = new PropagatorCalcCapacityChangeStartAmountImpulsionItemProvider(this);
		}

		return propagatorCalcCapacityChangeStartAmountImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeStartMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcCapacityChangeStartMomentItemProvider propagatorCalcCapacityChangeStartMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcCapacityChangeStartMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcCapacityChangeStartMomentAdapter() {
		if (propagatorCalcCapacityChangeStartMomentItemProvider == null) {
			propagatorCalcCapacityChangeStartMomentItemProvider = new PropagatorCalcCapacityChangeStartMomentItemProvider(this);
		}

		return propagatorCalcCapacityChangeStartMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcChildEventAmountAfterItemProvider propagatorCalcChildEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcChildEventAmountAfterAdapter() {
		if (propagatorCalcChildEventAmountAfterItemProvider == null) {
			propagatorCalcChildEventAmountAfterItemProvider = new PropagatorCalcChildEventAmountAfterItemProvider(this);
		}

		return propagatorCalcChildEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcChildEventMomentItemProvider propagatorCalcChildEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcChildEventMomentAdapter() {
		if (propagatorCalcChildEventMomentItemProvider == null) {
			propagatorCalcChildEventMomentItemProvider = new PropagatorCalcChildEventMomentItemProvider(this);
		}

		return propagatorCalcChildEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcChildEventSlopeAfterItemProvider propagatorCalcChildEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcChildEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcChildEventSlopeAfterAdapter() {
		if (propagatorCalcChildEventSlopeAfterItemProvider == null) {
			propagatorCalcChildEventSlopeAfterItemProvider = new PropagatorCalcChildEventSlopeAfterItemProvider(this);
		}

		return propagatorCalcChildEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEndEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEndEventMomentItemProvider propagatorCalcEndEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEndEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEndEventMomentAdapter() {
		if (propagatorCalcEndEventMomentItemProvider == null) {
			propagatorCalcEndEventMomentItemProvider = new PropagatorCalcEndEventMomentItemProvider(this);
		}

		return propagatorCalcEndEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventAmountAfterItemProvider propagatorCalcEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventAmountAfterAdapter() {
		if (propagatorCalcEventAmountAfterItemProvider == null) {
			propagatorCalcEventAmountAfterItemProvider = new PropagatorCalcEventAmountAfterItemProvider(this);
		}

		return propagatorCalcEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmountBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventAmountBeforeItemProvider propagatorCalcEventAmountBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmountBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventAmountBeforeAdapter() {
		if (propagatorCalcEventAmountBeforeItemProvider == null) {
			propagatorCalcEventAmountBeforeItemProvider = new PropagatorCalcEventAmountBeforeItemProvider(this);
		}

		return propagatorCalcEventAmountBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventMomentItemProvider propagatorCalcEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventMomentAdapter() {
		if (propagatorCalcEventMomentItemProvider == null) {
			propagatorCalcEventMomentItemProvider = new PropagatorCalcEventMomentItemProvider(this);
		}

		return propagatorCalcEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventSlopeAfterItemProvider propagatorCalcEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventSlopeAfterAdapter() {
		if (propagatorCalcEventSlopeAfterItemProvider == null) {
			propagatorCalcEventSlopeAfterItemProvider = new PropagatorCalcEventSlopeAfterItemProvider(this);
		}

		return propagatorCalcEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlopeBefore} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventSlopeBeforeItemProvider propagatorCalcEventSlopeBeforeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlopeBefore}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventSlopeBeforeAdapter() {
		if (propagatorCalcEventSlopeBeforeItemProvider == null) {
			propagatorCalcEventSlopeBeforeItemProvider = new PropagatorCalcEventSlopeBeforeItemProvider(this);
		}

		return propagatorCalcEventSlopeBeforeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventsProviderRefreshEvents} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventsProviderRefreshEventsItemProvider propagatorCalcEventsProviderRefreshEventsItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventsProviderRefreshEvents}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventsProviderRefreshEventsAdapter() {
		if (propagatorCalcEventsProviderRefreshEventsItemProvider == null) {
			propagatorCalcEventsProviderRefreshEventsItemProvider = new PropagatorCalcEventsProviderRefreshEventsItemProvider(this);
		}

		return propagatorCalcEventsProviderRefreshEventsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeAbsoluteAtomicMomentItemProvider propagatorCalcSlopeAbsoluteAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeAbsoluteAtomicMomentAdapter() {
		if (propagatorCalcSlopeAbsoluteAtomicMomentItemProvider == null) {
			propagatorCalcSlopeAbsoluteAtomicMomentItemProvider = new PropagatorCalcSlopeAbsoluteAtomicMomentItemProvider(this);
		}

		return propagatorCalcSlopeAbsoluteAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteAtomicSlopeAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteAtomicSlopeAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteAdapter() {
		if (propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider == null) {
			propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider = new PropagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider(this);
		}

		return propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteSlopeAbsolute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteSlopeAbsolute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeAbsoluteSlopeAbsoluteAdapter() {
		if (propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider == null) {
			propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider = new PropagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider(this);
		}

		return propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeAbsoluteSlopeAfterItemProvider propagatorCalcSlopeAbsoluteSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeAbsoluteSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeAbsoluteSlopeAfterAdapter() {
		if (propagatorCalcSlopeAbsoluteSlopeAfterItemProvider == null) {
			propagatorCalcSlopeAbsoluteSlopeAfterItemProvider = new PropagatorCalcSlopeAbsoluteSlopeAfterItemProvider(this);
		}

		return propagatorCalcSlopeAbsoluteSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionAtomicMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeImpulsionAtomicMomentItemProvider propagatorCalcSlopeImpulsionAtomicMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionAtomicMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeImpulsionAtomicMomentAdapter() {
		if (propagatorCalcSlopeImpulsionAtomicMomentItemProvider == null) {
			propagatorCalcSlopeImpulsionAtomicMomentItemProvider = new PropagatorCalcSlopeImpulsionAtomicMomentItemProvider(this);
		}

		return propagatorCalcSlopeImpulsionAtomicMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionAtomicSlopeImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionAtomicSlopeImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeImpulsionAtomicSlopeImpulsionAdapter() {
		if (propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider == null) {
			propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider = new PropagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider(this);
		}

		return propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeImpulsionSlopeAfterItemProvider propagatorCalcSlopeImpulsionSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeImpulsionSlopeAfterAdapter() {
		if (propagatorCalcSlopeImpulsionSlopeAfterItemProvider == null) {
			propagatorCalcSlopeImpulsionSlopeAfterItemProvider = new PropagatorCalcSlopeImpulsionSlopeAfterItemProvider(this);
		}

		return propagatorCalcSlopeImpulsionSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionSlopeImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcSlopeImpulsionSlopeImpulsionItemProvider propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcSlopeImpulsionSlopeImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcSlopeImpulsionSlopeImpulsionAdapter() {
		if (propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider == null) {
			propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider = new PropagatorCalcSlopeImpulsionSlopeImpulsionItemProvider(this);
		}

		return propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventAmountAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStartEventAmountAfterItemProvider propagatorCalcStartEventAmountAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventAmountAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStartEventAmountAfterAdapter() {
		if (propagatorCalcStartEventAmountAfterItemProvider == null) {
			propagatorCalcStartEventAmountAfterItemProvider = new PropagatorCalcStartEventAmountAfterItemProvider(this);
		}

		return propagatorCalcStartEventAmountAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStartEventMomentItemProvider propagatorCalcStartEventMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStartEventMomentAdapter() {
		if (propagatorCalcStartEventMomentItemProvider == null) {
			propagatorCalcStartEventMomentItemProvider = new PropagatorCalcStartEventMomentItemProvider(this);
		}

		return propagatorCalcStartEventMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventSlopeAfter} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStartEventSlopeAfterItemProvider propagatorCalcStartEventSlopeAfterItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStartEventSlopeAfter}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStartEventSlopeAfterAdapter() {
		if (propagatorCalcStartEventSlopeAfterItemProvider == null) {
			propagatorCalcStartEventSlopeAfterItemProvider = new PropagatorCalcStartEventSlopeAfterItemProvider(this);
		}

		return propagatorCalcStartEventSlopeAfterItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeEndMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStockChangeEndMomentItemProvider propagatorCalcStockChangeEndMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeEndMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStockChangeEndMomentAdapter() {
		if (propagatorCalcStockChangeEndMomentItemProvider == null) {
			propagatorCalcStockChangeEndMomentItemProvider = new PropagatorCalcStockChangeEndMomentItemProvider(this);
		}

		return propagatorCalcStockChangeEndMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeEndSlopeImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStockChangeEndSlopeImpulsionItemProvider propagatorCalcStockChangeEndSlopeImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeEndSlopeImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStockChangeEndSlopeImpulsionAdapter() {
		if (propagatorCalcStockChangeEndSlopeImpulsionItemProvider == null) {
			propagatorCalcStockChangeEndSlopeImpulsionItemProvider = new PropagatorCalcStockChangeEndSlopeImpulsionItemProvider(this);
		}

		return propagatorCalcStockChangeEndSlopeImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeStartMoment} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStockChangeStartMomentItemProvider propagatorCalcStockChangeStartMomentItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeStartMoment}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStockChangeStartMomentAdapter() {
		if (propagatorCalcStockChangeStartMomentItemProvider == null) {
			propagatorCalcStockChangeStartMomentItemProvider = new PropagatorCalcStockChangeStartMomentItemProvider(this);
		}

		return propagatorCalcStockChangeStartMomentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeStartSlopeImpulsion} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcStockChangeStartSlopeImpulsionItemProvider propagatorCalcStockChangeStartSlopeImpulsionItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcStockChangeStartSlopeImpulsion}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcStockChangeStartSlopeImpulsionAdapter() {
		if (propagatorCalcStockChangeStartSlopeImpulsionItemProvider == null) {
			propagatorCalcStockChangeStartSlopeImpulsionItemProvider = new PropagatorCalcStockChangeStartSlopeImpulsionItemProvider(this);
		}

		return propagatorCalcStockChangeStartSlopeImpulsionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlope} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventSlopeItemProvider propagatorCalcEventSlopeItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventSlope}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventSlopeAdapter() {
		if (propagatorCalcEventSlopeItemProvider == null) {
			propagatorCalcEventSlopeItemProvider = new PropagatorCalcEventSlopeItemProvider(this);
		}

		return propagatorCalcEventSlopeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcAmountItemProvider propagatorCalcAmountItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcAmount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcAmountAdapter() {
		if (propagatorCalcAmountItemProvider == null) {
			propagatorCalcAmountItemProvider = new PropagatorCalcAmountItemProvider(this);
		}

		return propagatorCalcAmountItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmount} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PropagatorCalcEventAmountItemProvider propagatorCalcEventAmountItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.time.continuous.calc.PropagatorCalcEventAmount}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPropagatorCalcEventAmountAdapter() {
		if (propagatorCalcEventAmountItemProvider == null) {
			propagatorCalcEventAmountItemProvider = new PropagatorCalcEventAmountItemProvider(this);
		}

		return propagatorCalcEventAmountItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (propagatorScopeDistributionItemProvider != null) propagatorScopeDistributionItemProvider.dispose();
		if (propagatorCalcDistributionInitializationItemProvider != null) propagatorCalcDistributionInitializationItemProvider.dispose();
		if (propagatorLayerCompositeEventRefreshItemProvider != null) propagatorLayerCompositeEventRefreshItemProvider.dispose();
		if (propagatorCalcDistributionChildEventsItemProvider != null) propagatorCalcDistributionChildEventsItemProvider.dispose();
		if (propagatorCalcDistributionProvidedEventsItemProvider != null) propagatorCalcDistributionProvidedEventsItemProvider.dispose();
		if (propagatorCalcDistributionSequenceItemProvider != null) propagatorCalcDistributionSequenceItemProvider.dispose();
		if (propagatorLayerDistributionSlopesItemProvider != null) propagatorLayerDistributionSlopesItemProvider.dispose();
		if (propagatorLayerDistributionAmountsItemProvider != null) propagatorLayerDistributionAmountsItemProvider.dispose();
		if (propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider != null) propagatorCalcAmountAbsoluteAmountAbsoluteItemProvider.dispose();
		if (propagatorCalcAmountAbsoluteAmountAfterItemProvider != null) propagatorCalcAmountAbsoluteAmountAfterItemProvider.dispose();
		if (propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider != null) propagatorCalcAmountAbsoluteAtomicAmountAbsoluteItemProvider.dispose();
		if (propagatorCalcAmountAbsoluteAtomicMomentItemProvider != null) propagatorCalcAmountAbsoluteAtomicMomentItemProvider.dispose();
		if (propagatorCalcAmountImpulsionAmountAfterItemProvider != null) propagatorCalcAmountImpulsionAmountAfterItemProvider.dispose();
		if (propagatorCalcAmountImpulsionAmountImpulsionItemProvider != null) propagatorCalcAmountImpulsionAmountImpulsionItemProvider.dispose();
		if (propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider != null) propagatorCalcAmountImpulsionAtomicAmountImpulsionItemProvider.dispose();
		if (propagatorCalcAmountImpulsionAtomicMomentItemProvider != null) propagatorCalcAmountImpulsionAtomicMomentItemProvider.dispose();
		if (propagatorCalcCapacityChangeEndAmountImpulsionItemProvider != null) propagatorCalcCapacityChangeEndAmountImpulsionItemProvider.dispose();
		if (propagatorCalcCapacityChangeEndMomentItemProvider != null) propagatorCalcCapacityChangeEndMomentItemProvider.dispose();
		if (propagatorCalcCapacityChangeStartAmountImpulsionItemProvider != null) propagatorCalcCapacityChangeStartAmountImpulsionItemProvider.dispose();
		if (propagatorCalcCapacityChangeStartMomentItemProvider != null) propagatorCalcCapacityChangeStartMomentItemProvider.dispose();
		if (propagatorCalcChildEventAmountAfterItemProvider != null) propagatorCalcChildEventAmountAfterItemProvider.dispose();
		if (propagatorCalcChildEventMomentItemProvider != null) propagatorCalcChildEventMomentItemProvider.dispose();
		if (propagatorCalcChildEventSlopeAfterItemProvider != null) propagatorCalcChildEventSlopeAfterItemProvider.dispose();
		if (propagatorCalcEndEventMomentItemProvider != null) propagatorCalcEndEventMomentItemProvider.dispose();
		if (propagatorCalcEventAmountAfterItemProvider != null) propagatorCalcEventAmountAfterItemProvider.dispose();
		if (propagatorCalcEventAmountBeforeItemProvider != null) propagatorCalcEventAmountBeforeItemProvider.dispose();
		if (propagatorCalcEventMomentItemProvider != null) propagatorCalcEventMomentItemProvider.dispose();
		if (propagatorCalcEventSlopeAfterItemProvider != null) propagatorCalcEventSlopeAfterItemProvider.dispose();
		if (propagatorCalcEventSlopeBeforeItemProvider != null) propagatorCalcEventSlopeBeforeItemProvider.dispose();
		if (propagatorCalcEventsProviderRefreshEventsItemProvider != null) propagatorCalcEventsProviderRefreshEventsItemProvider.dispose();
		if (propagatorCalcSlopeAbsoluteAtomicMomentItemProvider != null) propagatorCalcSlopeAbsoluteAtomicMomentItemProvider.dispose();
		if (propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider != null) propagatorCalcSlopeAbsoluteAtomicSlopeAbsoluteItemProvider.dispose();
		if (propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider != null) propagatorCalcSlopeAbsoluteSlopeAbsoluteItemProvider.dispose();
		if (propagatorCalcSlopeAbsoluteSlopeAfterItemProvider != null) propagatorCalcSlopeAbsoluteSlopeAfterItemProvider.dispose();
		if (propagatorCalcSlopeImpulsionAtomicMomentItemProvider != null) propagatorCalcSlopeImpulsionAtomicMomentItemProvider.dispose();
		if (propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider != null) propagatorCalcSlopeImpulsionAtomicSlopeImpulsionItemProvider.dispose();
		if (propagatorCalcSlopeImpulsionSlopeAfterItemProvider != null) propagatorCalcSlopeImpulsionSlopeAfterItemProvider.dispose();
		if (propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider != null) propagatorCalcSlopeImpulsionSlopeImpulsionItemProvider.dispose();
		if (propagatorCalcStartEventAmountAfterItemProvider != null) propagatorCalcStartEventAmountAfterItemProvider.dispose();
		if (propagatorCalcStartEventMomentItemProvider != null) propagatorCalcStartEventMomentItemProvider.dispose();
		if (propagatorCalcStartEventSlopeAfterItemProvider != null) propagatorCalcStartEventSlopeAfterItemProvider.dispose();
		if (propagatorCalcStockChangeEndMomentItemProvider != null) propagatorCalcStockChangeEndMomentItemProvider.dispose();
		if (propagatorCalcStockChangeEndSlopeImpulsionItemProvider != null) propagatorCalcStockChangeEndSlopeImpulsionItemProvider.dispose();
		if (propagatorCalcStockChangeStartMomentItemProvider != null) propagatorCalcStockChangeStartMomentItemProvider.dispose();
		if (propagatorCalcStockChangeStartSlopeImpulsionItemProvider != null) propagatorCalcStockChangeStartSlopeImpulsionItemProvider.dispose();
		if (propagatorCalcEventSlopeItemProvider != null) propagatorCalcEventSlopeItemProvider.dispose();
		if (propagatorCalcAmountItemProvider != null) propagatorCalcAmountItemProvider.dispose();
		if (propagatorCalcEventAmountItemProvider != null) propagatorCalcEventAmountItemProvider.dispose();
	}

}
