<?xml version="1.0" encoding="UTF-8"?>
<description:Group xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:description="http://www.eclipse.org/sirius/description/1.1.0" xmlns:description_1="http://www.eclipse.org/sirius/diagram/description/1.1.0" xmlns:properties="http://www.eclipse.org/sirius/properties/1.0.0" xmlns:properties-ext-widgets-reference="http://www.eclipse.org/sirius/properties/1.0.0/ext/widgets/reference" xmlns:style="http://www.eclipse.org/sirius/diagram/description/style/1.1.0" xmlns:tool="http://www.eclipse.org/sirius/description/tool/1.1.0" xmlns:tool_1="http://www.eclipse.org/sirius/diagram/description/tool/1.1.0" name="job" version="12.0.0.2017041100">
  <ownedViewpoints name="vp_doctasks" label="Diagrams Docs &amp; Tasks">
    <ownedRepresentations xsi:type="description_1:DiagramDescription" name="di_doctasks" label="Docs &amp; Tasks Diagram" domainClass="job::TaskDomain" enablePopupBars="true">
      <metamodel href="../../com.misc.common.moplaf.job.emf/model/job.ecore#/"/>
      <defaultLayer name="Default">
        <nodeMappings name="di_doctasks_doc" label="aDoc" semanticCandidatesExpression="feature:Docs" domainClass="job::Doc">
          <style xsi:type="style:SquareDescription" labelExpression="feature:Description" labelPosition="node" width="10" height="10">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <color xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_purple']"/>
          </style>
        </nodeMappings>
        <nodeMappings name="di_doctasks_task" label="aTask" semanticCandidatesExpression="feature:Tasks" domainClass="job::Task">
          <style xsi:type="style:DotDescription" labelExpression="feature:Description" sizeComputationExpression="10" labelPosition="node" strokeSizeComputationExpression="10">
            <borderColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            <backgroundColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='light_orange']"/>
          </style>
        </nodeMappings>
        <edgeMappings name="di_doctasks_input" semanticCandidatesExpression="aql:self.Tasks.Inputs" sourceMapping="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_doc']" targetMapping="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']" targetFinderExpression="aql:self.Consumer" sourceFinderExpression="aql:self.Doc" domainClass="job::TaskInput" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <edgeMappings name="di_doctasks_output" semanticCandidatesExpression="aql:self.Tasks.Outputs" sourceMapping="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']" targetMapping="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_doc']" targetFinderExpression="aql:self.Doc" sourceFinderExpression="aql:self.Producer" domainClass="job::TaskOutput" useDomainElement="true">
          <style sizeComputationExpression="2">
            <strokeColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='gray']"/>
            <centerLabelStyleDescription>
              <labelColor xsi:type="description:SystemColor" href="environment:/viewpoint#//@systemColors/@entries[name='black']"/>
            </centerLabelStyleDescription>
          </style>
        </edgeMappings>
        <toolSections name="di_doctasks_tools_taskload" label="Docs &amp; Tasks tools">
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actionrun2" label="Run  a Task " precondition="service:runRunEnabled">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" variableName="done" valueExpression="service:runRun"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actionreset" label="Reset  a Task " precondition="service:runResetEnabled">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" variableName="done" valueExpression="service:runReset"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actioncancel" label="Cancel a Task " precondition="service:runCancelEnabled">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" variableName="done" valueExpression="service:runCancel"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actionflush" label="Flush a Doc" precondition="service:docFlushEnabled">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" variableName="done" valueExpression="service:docFlush"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" name="di_doctasks_tools_actionrun_createtask" label="Create Tasks" nodeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:self">
                <subModelOperations xsi:type="tool:Let" variableName="tocreate">
                  <subModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create new Tasks">
                    <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                      <initialOperation/>
                    </buttons>
                    <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                      <initialOperation>
                        <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:tocreate">
                          <subModelOperations xsi:type="tool:MoveElement" newContainerExpression="aql:container" featureName="Tasks"/>
                        </firstModelOperations>
                      </initialOperation>
                    </buttons>
                    <page name="di_doctasks_tools_actionrun_createtask_page" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@toolSections.0/@ownedTools[name='di_doctasks_tools_actionrun_createtask']/@initialOperation/@firstModelOperations/@subModelOperations.0/@subModelOperations.0/@groups.0"/>
                    <groups name="di_doctasks_tools_actionrun_createtask_group" labelExpression="Select Tasks to create" semanticCandidateExpression="var:self">
                      <controls xsi:type="properties:ListDescription" name="di_doctasks_tools_actionrun_createtask_list" labelExpression="Tasks" valueExpression="service:getNewTasks" displayExpression="aql:value.Description">
                        <onClickOperation>
                          <firstModelOperations xsi:type="tool:Let" variableName="tocreate" valueExpression="aql:selection->first()"/>
                        </onClickOperation>
                      </controls>
                    </groups>
                  </subModelOperations>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" name="di_doctasks_tools_actionrun_createinput" label="Create Task Input" edgeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@edgeMappings[name='di_doctasks_input']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:target">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="job::TaskInput" referenceName="Inputs">
                  <subModelOperations xsi:type="tool:SetValue" featureName="Doc" valueExpression="aql:source"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:EdgeCreationDescription" name="di_doctasks_tools_actionrun_createoutput" label="Create Task Output" edgeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@edgeMappings[name='di_doctasks_output']">
            <sourceVariable name="source"/>
            <targetVariable name="target"/>
            <sourceViewVariable name="sourceView"/>
            <targetViewVariable name="targetView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:source">
                <subModelOperations xsi:type="tool:CreateInstance" typeName="job::TaskOutput" referenceName="Outputs">
                  <subModelOperations xsi:type="tool:SetValue" featureName="Doc" valueExpression="aql:target"/>
                </subModelOperations>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actionclone" label="Clone a Doc" precondition="service:docCloneEnabled">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" variableName="done" valueExpression="service:docClone"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
        <toolSections name="di_doctasks_tools_playground" label="Playground tools">
          <ownedTools xsi:type="tool_1:NodeCreationDescription" name="di_doctasks_tools_actionrun_createtask1" nodeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ExternalJavaAction" name="di_doctasks_tools_actionrun_createtask" id="com.misc.common.moplaf.job.design.action.run"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" name="di_doctasks_tools_actionrun_createtask2" elementsToSelect="aql:instance" nodeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:Let" valueExpression="service:myService3(self)"/>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool_1:NodeCreationDescription" name="di_doctasks_tools_actionrun_createtask3" nodeMappings="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@nodeMappings[name='di_doctasks_task']">
            <variable name="container"/>
            <viewVariable name="containerView"/>
            <initialOperation>
              <firstModelOperations xsi:type="properties:DialogModelOperation" titleExpression="Create a new Task">
                <buttons labelExpression="Cancel" closeDialogOnClick="true" rollbackChangesOnClose="true">
                  <initialOperation/>
                </buttons>
                <buttons labelExpression="OK" default="true" closeDialogOnClick="true">
                  <initialOperation>
                    <firstModelOperations xsi:type="tool:Let" valueExpression="service:myService3(self)"/>
                  </initialOperation>
                </buttons>
                <page name="di_doctasks_tools_actionrun_createtask_page" labelExpression="Page" semanticCandidateExpression="var:self" groups="//@ownedViewpoints[name='vp_doctasks']/@ownedRepresentations[name='di_doctasks']/@defaultLayer/@toolSections.1/@ownedTools[name='di_doctasks_tools_actionrun_createtask3']/@initialOperation/@firstModelOperations/@groups.0"/>
                <groups name="di_doctasks_tools_actionrun_createtask_group" labelExpression="Group" semanticCandidateExpression="var:self">
                  <controls xsi:type="properties:ListDescription" name="di_doctasks_tools_actionrun_createtask_list" labelExpression="Tasks" valueExpression="service:getNewTasks" displayExpression="aql:value.Description">
                    <onClickOperation>
                      <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:selection->first()">
                        <subModelOperations xsi:type="tool:Let" valueExpression="service:myService3(self)"/>
                      </firstModelOperations>
                    </onClickOperation>
                  </controls>
                </groups>
              </firstModelOperations>
            </initialOperation>
          </ownedTools>
          <ownedTools xsi:type="tool:OperationAction" name="di_doctasks_tools_actionrun2" label="Run  a Task 2" precondition="aql:false">
            <view name="views"/>
            <initialOperation>
              <firstModelOperations xsi:type="tool:ExternalJavaAction" name="di_doctasks_tools_actionrun_call" id="com.misc.common.moplaf.job.design.action.run"/>
            </initialOperation>
          </ownedTools>
        </toolSections>
      </defaultLayer>
    </ownedRepresentations>
    <ownedJavaExtensions qualifiedClassName="com.misc.common.moplaf.job.design.Services"/>
  </ownedViewpoints>
  <extensions xsi:type="properties:ViewExtensionDescription" name="pr_doctasks">
    <metamodels href="../../com.misc.common.moplaf.job.emf/model/job.ecore#/"/>
    <categories name="Default">
      <pages name="pr_page_doctasks" label="Doc &amp; Tasks" labelExpression="Docs &amp; Tasks" semanticCandidateExpression="var:self" groups="//@extensions.0/@categories.0/@groups.2 //@extensions.0/@categories.0/@groups.3 //@extensions.0/@categories.0/@groups.4 //@extensions.0/@categories.0/@groups.1 //@extensions.0/@categories.0/@groups.5" indented="true"/>
      <pages name="pr_page_default" label="Default Page" labelExpression="aql:input.emfEditServices(self).getTabName()" semanticCandidateExpression="aql:input.getAllSemanticElements()" groups="//@extensions.0/@categories.0/@groups.0"/>
      <groups name="sirius_default_rules_defaultgroup" labelExpression="Properties" semanticCandidateExpression="var:self" preconditionExpression="">
        <controls xsi:type="properties:DynamicMappingForDescription" name="sirius_default_rules_structural_features_for" iterator="eStructuralFeature" iterableExpression="aql:input.emfEditServices(self).getEStructuralFeatures()">
          <ifs name="sirius_default_rules_mono_string_if" predicateExpression="aql:input.emfEditServices(self).needsTextWidget(eStructuralFeature) and not input.emfEditServices(self).isMultiline(eStructuralFeature)">
            <widget xsi:type="properties:TextDescription" name="sirius_default_rules_mono_string" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_multi_string_if" predicateExpression="aql:input.emfEditServices(self).needsTextWidget(eStructuralFeature) and input.emfEditServices(self).isMultiline(eStructuralFeature)">
            <widget xsi:type="properties:TextAreaDescription" name="sirius_default_rules_multi_string" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_mono_boolean" predicateExpression="aql:input.emfEditServices(self).needsCheckboxWidget(eStructuralFeature)">
            <widget xsi:type="properties:CheckboxDescription" name="sirius_default_rules_mono_boolean" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_enum_if" predicateExpression="aql:eStructuralFeature.eType.oclIsKindOf(ecore::EEnum) and not(eStructuralFeature.many)">
            <widget xsi:type="properties:RadioDescription" name="sirius_default_rules_enum" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:eStructuralFeature.eType.oclAsType(ecore::EEnum).getEEnumLiteralByLiteral(self.eGet(eStructuralFeature.name).toString())" candidatesExpression="aql:eStructuralFeature.eType.oclAsType(ecore::EEnum).eLiterals" candidateDisplayExpression="aql:candidate.name" numberOfColumns="5">
              <initialOperation>
                <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="aql:input.emfEditServices(self).setValue(eStructuralFeature, newValue.instance)"/>
              </initialOperation>
              <conditionalStyles preconditionExpression="aql:eStructuralFeature.lowerBound==1">
                <style>
                  <labelFontFormat>bold</labelFontFormat>
                </style>
              </conditionalStyles>
            </widget>
          </ifs>
          <ifs name="sirius_default_rules_eattribute_many_if" predicateExpression="aql:eStructuralFeature.oclIsKindOf(ecore::EAttribute) and eStructuralFeature.many">
            <widget xsi:type="properties:ListDescription" name="sirius_default_rules_eattribute_many" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" isEnabledExpression="aql:eStructuralFeature.changeable" valueExpression="aql:self.eGet(eStructuralFeature.name)" displayExpression="var:value"/>
          </ifs>
          <ifs name="sirius_default_rules_ereference_if" predicateExpression="aql:eStructuralFeature.oclIsKindOf(ecore::EReference)">
            <widget xsi:type="properties-ext-widgets-reference:ExtReferenceDescription" name="sirius_default_rules_ereference" labelExpression="aql:input.emfEditServices(self).getText(eStructuralFeature)+':'" helpExpression="aql:input.emfEditServices(self).getDescription(eStructuralFeature)" referenceNameExpression="aql:eStructuralFeature.name"/>
          </ifs>
        </controls>
      </groups>
      <groups name="pr_group_task" label="Group Task" labelExpression="Task" domainClass="job::Task" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="pr_group_task_description" label="Field Task Description" labelExpression="Description" helpExpression="String used by user to recognize the Task" isEnabledExpression="aql:false" valueExpression="aql:self.Description">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_task_name" label="Field Task Name" labelExpression="Name" helpExpression="String set be the user for the Task name" valueExpression="aql:self.Name">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool:SetValue" featureName="Name" valueExpression="aql:newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="pr_group_task_inputs" label="List Task Inputs" labelExpression="Inputs" valueExpression="aql:self.Inputs" displayExpression="aql:value.Doc.Description">
          <onClickOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="pr_group_task_outputs" label="List Task Outputs" labelExpression="Outputs" valueExpression="aql:self.Outputs" displayExpression="aql:value.Doc.Description">
          <onClickOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
        </controls>
      </groups>
      <groups name="pr_group_enabled_run" label="Group Enabled Run" labelExpression="Enabled" domainClass="job::Run" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="pr_group_enabled_run" label="Field RunEnabled" labelExpression="Run Enabled" helpExpression="Feedback about allowed to execute the run" isEnabledExpression="aql:false" valueExpression="aql:self.RunFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_enabled_reset" label="Field ResetEnabled" labelExpression="Reset Enabled" helpExpression="Feedback about allowed to reset the run" isEnabledExpression="aql:false" valueExpression="aql:self.ResetFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_enabled_cancel" label="Field CancelEnabled" labelExpression="Cancel Enabled" helpExpression="Feedback about allowed to cancel the run" isEnabledExpression="aql:false" valueExpression="aql:self.CancelFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool:SetValue" featureName="Cancelled" valueExpression="aql:newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
      </groups>
      <groups name="pr_group_enabled_doc" label="Group Enabled Doc" labelExpression="Enabled" domainClass="job::Doc" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="pr_group_enabled_flush" label="Field FlushEnabled" labelExpression="Flush Enabled" helpExpression="Feedback about allowed to flush the doc" isEnabledExpression="aql:false" valueExpression="aql:self.FlushFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_enabled_clone" label="Field CloneEnabled" labelExpression="Clone Enabled" helpExpression="Feedback about allowed to clone the doc" isEnabledExpression="aql:false" valueExpression="aql:self.CloneFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="pr_group_run" label="Group Run" labelExpression="Run" domainClass="job::Run" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:CheckboxDescription" name="pr_group_run_returned" label="Field RunReturned" labelExpression="Run Returned" isEnabledExpression="aql:false" valueExpression="aql:self.Returned">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="pr_group_run_success" label="Field RunSuccess" labelExpression="Run Success" isEnabledExpression="aql:false" valueExpression="aql:self.ReturnSuccess">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="pr_group_run_cancelled" label="Field RunCancelled" labelExpression="Run Cancelled" valueExpression="aql:self.Cancelled">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self">
              <subModelOperations xsi:type="tool:SetValue" featureName="Cancelled" valueExpression="aql:newValue"/>
            </firstModelOperations>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_run_feedback" label="Field RunFeedback" labelExpression="Run Feedback" isEnabledExpression="aql:false" valueExpression="aql:self.ReturnFeedback">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:TextDescription" name="pr_group_run_information" label="Field RunInformation" labelExpression="Run Information" isEnabledExpression="aql:false" valueExpression="aql:self.ReturnInformation">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
      </groups>
      <groups name="pr_group_doc" label="Group Doc" labelExpression="Doc" domainClass="job::Doc" semanticCandidateExpression="var:self">
        <controls xsi:type="properties:TextDescription" name="pr_group_task_description" label="Field Task Description" labelExpression="Description" helpExpression="String used by user to recognize the Doc" isEnabledExpression="aql:false" valueExpression="aql:self.Description">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:CheckboxDescription" name="pr_group_doc_loaded" label="Field DocLoaded" labelExpression="Doc Loaded" isEnabledExpression="aql:false" valueExpression="aql:self.Loaded">
          <initialOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </initialOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="pr_group_doc_producers" label="List Doc Producers" labelExpression="Producers" isEnabledExpression="aql:false" valueExpression="aql:self.Refs->filter(job::TaskOutput)" displayExpression="aql:value.Producer.Description">
          <onClickOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
        </controls>
        <controls xsi:type="properties:ListDescription" name="pr_group_doc_consumers" label="List Doc Consumers" labelExpression="Consumers" isEnabledExpression="aql:false" valueExpression="aql:self.Refs->filter(job::TaskInput)" displayExpression="aql:value.Consumer.Description">
          <onClickOperation>
            <firstModelOperations xsi:type="tool:ChangeContext" browseExpression="var:self"/>
          </onClickOperation>
        </controls>
      </groups>
    </categories>
  </extensions>
</description:Group>
