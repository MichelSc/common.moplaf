/*******************************************************************************
 * Copyright (c) 2017 Michel Schaffers and others.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *     Michel Schaffers - initial API and implementation
 *******************************************************************************/
/**
 */
package com.misc.common.moplaf.macroplanner.solver.provider;

import com.misc.common.moplaf.macroplanner.solver.util.MacroPlannerSolverAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class MacroPlannerSolverItemProviderAdapterFactory extends MacroPlannerSolverAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public MacroPlannerSolverItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.Scenario} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ScenarioItemProvider scenarioItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.Scenario}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createScenarioAdapter() {
		if (scenarioItemProvider == null) {
			scenarioItemProvider = new ScenarioItemProvider(this);
		}

		return scenarioItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPMacroPlanner} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPMacroPlannerItemProvider lpMacroPlannerItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPMacroPlanner}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPMacroPlannerAdapter() {
		if (lpMacroPlannerItemProvider == null) {
			lpMacroPlannerItemProvider = new LPMacroPlannerItemProvider(this);
		}

		return lpMacroPlannerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPTuple} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPTupleItemProvider lpTupleItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPTuple}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPTupleAdapter() {
		if (lpTupleItemProvider == null) {
			lpTupleItemProvider = new LPTupleItemProvider(this);
		}

		return lpTupleItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPTimeLine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPTimeLineItemProvider lpTimeLineItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPTimeLine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPTimeLineAdapter() {
		if (lpTimeLineItemProvider == null) {
			lpTimeLineItemProvider = new LPTimeLineItemProvider(this);
		}

		return lpTimeLineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPTimeBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPTimeBucketItemProvider lpTimeBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPTimeBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPTimeBucketAdapter() {
		if (lpTimeBucketItemProvider == null) {
			lpTimeBucketItemProvider = new LPTimeBucketItemProvider(this);
		}

		return lpTimeBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPProductSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPProductSetItemProvider lpProductSetItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPProductSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPProductSetAdapter() {
		if (lpProductSetItemProvider == null) {
			lpProductSetItemProvider = new LPProductSetItemProvider(this);
		}

		return lpProductSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPProductItemProvider lpProductItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPProductAdapter() {
		if (lpProductItemProvider == null) {
			lpProductItemProvider = new LPProductItemProvider(this);
		}

		return lpProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPProductBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPProductBucketItemProvider lpProductBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPProductBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPProductBucketAdapter() {
		if (lpProductBucketItemProvider == null) {
			lpProductBucketItemProvider = new LPProductBucketItemProvider(this);
		}

		return lpProductBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPSupply} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPSupplyItemProvider lpSupplyItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPSupply}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPSupplyAdapter() {
		if (lpSupplyItemProvider == null) {
			lpSupplyItemProvider = new LPSupplyItemProvider(this);
		}

		return lpSupplyItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPSupplyBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPSupplyBucketItemProvider lpSupplyBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPSupplyBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPSupplyBucketAdapter() {
		if (lpSupplyBucketItemProvider == null) {
			lpSupplyBucketItemProvider = new LPSupplyBucketItemProvider(this);
		}

		return lpSupplyBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPCapacity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPCapacityItemProvider lpCapacityItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPCapacity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPCapacityAdapter() {
		if (lpCapacityItemProvider == null) {
			lpCapacityItemProvider = new LPCapacityItemProvider(this);
		}

		return lpCapacityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPCapacityBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPCapacityBucketItemProvider lpCapacityBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPCapacityBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPCapacityBucketAdapter() {
		if (lpCapacityBucketItemProvider == null) {
			lpCapacityBucketItemProvider = new LPCapacityBucketItemProvider(this);
		}

		return lpCapacityBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPResourceSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPResourceSetItemProvider lpResourceSetItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPResourceSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPResourceSetAdapter() {
		if (lpResourceSetItemProvider == null) {
			lpResourceSetItemProvider = new LPResourceSetItemProvider(this);
		}

		return lpResourceSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPResourceItemProvider lpResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPResourceAdapter() {
		if (lpResourceItemProvider == null) {
			lpResourceItemProvider = new LPResourceItemProvider(this);
		}

		return lpResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPResourceBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPResourceBucketItemProvider lpResourceBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPResourceBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPResourceBucketAdapter() {
		if (lpResourceBucketItemProvider == null) {
			lpResourceBucketItemProvider = new LPResourceBucketItemProvider(this);
		}

		return lpResourceBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPAvailability} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPAvailabilityItemProvider lpAvailabilityItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPAvailability}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPAvailabilityAdapter() {
		if (lpAvailabilityItemProvider == null) {
			lpAvailabilityItemProvider = new LPAvailabilityItemProvider(this);
		}

		return lpAvailabilityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPAvailabilityBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPAvailabilityBucketItemProvider lpAvailabilityBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPAvailabilityBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPAvailabilityBucketAdapter() {
		if (lpAvailabilityBucketItemProvider == null) {
			lpAvailabilityBucketItemProvider = new LPAvailabilityBucketItemProvider(this);
		}

		return lpAvailabilityBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingSetItemProvider lpRoutingSetItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingSetAdapter() {
		if (lpRoutingSetItemProvider == null) {
			lpRoutingSetItemProvider = new LPRoutingSetItemProvider(this);
		}

		return lpRoutingSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRouting} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingItemProvider lpRoutingItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRouting}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingAdapter() {
		if (lpRoutingItemProvider == null) {
			lpRoutingItemProvider = new LPRoutingItemProvider(this);
		}

		return lpRoutingItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingProductItemProvider lpRoutingProductItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingProductAdapter() {
		if (lpRoutingProductItemProvider == null) {
			lpRoutingProductItemProvider = new LPRoutingProductItemProvider(this);
		}

		return lpRoutingProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingResourceItemProvider lpRoutingResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingResourceAdapter() {
		if (lpRoutingResourceItemProvider == null) {
			lpRoutingResourceItemProvider = new LPRoutingResourceItemProvider(this);
		}

		return lpRoutingResourceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucket} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingBucketItemProvider lpRoutingBucketItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucket}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingBucketAdapter() {
		if (lpRoutingBucketItemProvider == null) {
			lpRoutingBucketItemProvider = new LPRoutingBucketItemProvider(this);
		}

		return lpRoutingBucketItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucketProduct} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingBucketProductItemProvider lpRoutingBucketProductItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucketProduct}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingBucketProductAdapter() {
		if (lpRoutingBucketProductItemProvider == null) {
			lpRoutingBucketProductItemProvider = new LPRoutingBucketProductItemProvider(this);
		}

		return lpRoutingBucketProductItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucketResource} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LPRoutingBucketResourceItemProvider lpRoutingBucketResourceItemProvider;

	/**
	 * This creates an adapter for a {@link com.misc.common.moplaf.macroplanner.solver.LPRoutingBucketResource}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLPRoutingBucketResourceAdapter() {
		if (lpRoutingBucketResourceItemProvider == null) {
			lpRoutingBucketResourceItemProvider = new LPRoutingBucketResourceItemProvider(this);
		}

		return lpRoutingBucketResourceItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (scenarioItemProvider != null) scenarioItemProvider.dispose();
		if (lpMacroPlannerItemProvider != null) lpMacroPlannerItemProvider.dispose();
		if (lpTupleItemProvider != null) lpTupleItemProvider.dispose();
		if (lpTimeLineItemProvider != null) lpTimeLineItemProvider.dispose();
		if (lpTimeBucketItemProvider != null) lpTimeBucketItemProvider.dispose();
		if (lpProductSetItemProvider != null) lpProductSetItemProvider.dispose();
		if (lpProductItemProvider != null) lpProductItemProvider.dispose();
		if (lpProductBucketItemProvider != null) lpProductBucketItemProvider.dispose();
		if (lpSupplyItemProvider != null) lpSupplyItemProvider.dispose();
		if (lpSupplyBucketItemProvider != null) lpSupplyBucketItemProvider.dispose();
		if (lpCapacityItemProvider != null) lpCapacityItemProvider.dispose();
		if (lpCapacityBucketItemProvider != null) lpCapacityBucketItemProvider.dispose();
		if (lpResourceSetItemProvider != null) lpResourceSetItemProvider.dispose();
		if (lpResourceItemProvider != null) lpResourceItemProvider.dispose();
		if (lpResourceBucketItemProvider != null) lpResourceBucketItemProvider.dispose();
		if (lpAvailabilityItemProvider != null) lpAvailabilityItemProvider.dispose();
		if (lpAvailabilityBucketItemProvider != null) lpAvailabilityBucketItemProvider.dispose();
		if (lpRoutingSetItemProvider != null) lpRoutingSetItemProvider.dispose();
		if (lpRoutingItemProvider != null) lpRoutingItemProvider.dispose();
		if (lpRoutingProductItemProvider != null) lpRoutingProductItemProvider.dispose();
		if (lpRoutingResourceItemProvider != null) lpRoutingResourceItemProvider.dispose();
		if (lpRoutingBucketItemProvider != null) lpRoutingBucketItemProvider.dispose();
		if (lpRoutingBucketProductItemProvider != null) lpRoutingBucketProductItemProvider.dispose();
		if (lpRoutingBucketResourceItemProvider != null) lpRoutingBucketResourceItemProvider.dispose();
	}

}
